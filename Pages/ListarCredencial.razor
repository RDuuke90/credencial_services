@page "/listar"
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h2>Lista de Credenciales</h2>

@if (!isAuthenticated)
{
    <p class="text-danger">Debe ingresar la clave de acceso para acceder a esta p치gina.</p>
}
else
{
    <ul class="list-group">
        @foreach (var credencial in crendenciales)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@credencial.servicio (@credencial.usuario)</span>
                <button class="btn btn-danger btn-sm" @onclick="() => EliminarCredencial(credencial.servicio)">Eliminar</button>
            </li>
        }
    </ul>
}

@code {
    private bool isAuthenticated;
    private List<CredencialDto> crendenciales = new List<CredencialDto>();

    protected override async Task OnInitializedAsync()
    {
        // Verificar si el token de autenticaci칩n existe en localStorage
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        isAuthenticated = token == "authenticated";

        // Si no est치 autenticado, redirigir a la p치gina de acceso
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/access");
        }
        else
        {
            await cargarCredenciales();
        }
    }

    private async Task cargarCredenciales()
    {
        crendenciales = await HttpClient.GetFromJsonAsync<List<CredencialDto>>("/api/credenciales") ?? new List<CredencialDto>();
    }

    private async Task EliminarCredencial(string servicio)
    {
        await HttpClient.DeleteAsync($"/api/credenciales/{servicio}");
        await cargarCredenciales();
    }

    public class CredencialDto
    {
        public string servicio { get; set; }
        public string usuario { get; set; }
        public string password { get; set; }
    }
}
