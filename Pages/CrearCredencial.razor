@page "/crear"
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h2>Crear Credencial</h2>

@if (!isAuthenticated)
{
    <p class="text-danger">Debe ingresar la clave de acceso para acceder a esta página.</p>
}
else
{
    <div class="form-group">
        <label>Servicio:</label>
        <input @bind="servicio" class="form-control" />
    </div>
    <div class="form-group">
        <label>Usuario:</label>
        <input @bind="usuario" class="form-control" />
    </div>
    <div class="form-group">
        <label>Contraseña:</label>
        <input @bind="password" class="form-control" type="password" />
    </div>
    <br />
    <button @onclick="crear_credencial" class="btn btn-primary">Crear</button>
}

@code {
    private bool isAuthenticated;
    private string servicio;
    private string usuario;
    private string password;

    protected override async Task OnInitializedAsync()
    {
        // Verificar si el token de autenticación existe en localStorage
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        isAuthenticated = token == "authenticated";

        // Si no está autenticado, redirigir a la página de acceso
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/access");
        }
    }

    private async Task crear_credencial()
    {
        var credencial = new { servicio, usuario, password };
        var response = await HttpClient.PostAsJsonAsync("/api/credenciales", credencial);
        if (response.IsSuccessStatusCode)
        {

            servicio = usuario = password = string.Empty;
        }
    }
}
